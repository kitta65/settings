# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet ch
##### ${1:chapter} #####$0
endsnippet

snippet alt_point
chart = alt.Chart(${0})
chart.mark_point().encode(
	x="",
	y="",
).interactive().save("chart.html")
endsnippet

snippet alt_point_with_label
chart = alt.Chart(${0})
chart.mark_point().encode(
	x="",
	y="",
	tooltip=[""]
)
endsnippet

snippet alt_line
chart = alt.Chart(${0})
chart.mark_line().encode(
	x="",
	y="",
).interactive().save("chart.html")
endsnippet

snippet alt_line_with_conf
chart = alt.Chart(${0})
line = chart.mark_line().encode(
	x="",
	y="mean()",
)
band = chart.mark_errorband(extent="ci").encode(
	#ci...confidence interval
	#stderr...standard error
	#stdev...standard deviation
	x="",
	y="",
)
(line + band).interactive().save("chart.html")
endsnippet

snippet init
#!/usr/bin/env python3
${0}
if __name__ == "__main__":
	pass
endsnippet
